{
  "name": "mustache",
  "version": "2.2.1",
  "description": "Logic-less {{mustache}} templates with JavaScript",
  "author": {
    "name": "mustache.js Authors",
    "email": "http://github.com/janl/mustache.js"
  },
  "homepage": "https://github.com/janl/mustache.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/janl/mustache.js.git"
  },
  "keywords": [
    "mustache",
    "template",
    "templates",
    "ejs"
  ],
  "main": "./mustache.js",
  "bin": {
    "mustache": "./bin/mustache"
  },
  "files": [
    "mustache.js",
    "mustache.min.js",
    "bin",
    "wrappers",
    "LICENSE"
  ],
  "volo": {
    "url": "https://raw.github.com/janl/mustache.js/{version}/mustache.js"
  },
  "engines": {
    "npm": ">=1.4.0"
  },
  "scripts": {
    "pretest": "eslint mustache.js bin/mustache",
    "test": "mocha --reporter spec test/*-test.js",
    "test-render": "mocha  --reporter spec test/render-test",
    "pre-test-browser": "node test/create-browser-suite.js",
    "test-browser": "npm run pre-test-browser && zuul -- test/context-test.js test/parse-test.js test/scanner-test.js test/render-test-browser.js",
    "test-browser-local": "npm run pre-test-browser && zuul --local 8080 -- test/context-test.js test/scanner-test.js test/parse-test.js test/render-test-browser.js"
  },
  "devDependencies": {
    "chai": "^3.4.0",
    "eslint": "^1.7.3",
    "mocha": "^2.1.0",
    "zuul": "^3.7.0"
  },
  "spm": {
    "main": "mustache.js",
    "ignore": [
      "test",
      "wrappers"
    ]
  },
  "license": "MIT",
  "readme": "# mustache.js - Logic-less {{mustache}} templates with JavaScript\n\n> What could be more logical awesome than no logic at all?\n\n[![Build Status](https://travis-ci.org/janl/mustache.js.svg?branch=master)](https://travis-ci.org/janl/mustache.js) [![Gitter chat](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/janl/mustache.js)\n\n[mustache.js](http://github.com/janl/mustache.js) is an implementation of the [mustache](http://mustache.github.com/) template system in JavaScript.\n\n[Mustache](http://mustache.github.com/) is a logic-less template syntax. It can be used for HTML, config files, source code - anything. It works by expanding tags in a template using values provided in a hash or object.\n\nWe call it \"logic-less\" because there are no if statements, else clauses, or for loops. Instead there are only tags. Some tags are replaced with a value, some nothing, and others a series of values.\n\nFor a language-agnostic overview of mustache's template syntax, see the `mustache(5)` [manpage](http://mustache.github.com/mustache.5.html).\n\n## Where to use mustache.js?\n\nYou can use mustache.js to render mustache templates anywhere you can use JavaScript. This includes web browsers, server-side environments such as [node](http://nodejs.org/), and [CouchDB](http://couchdb.apache.org/) views.\n\nmustache.js ships with support for both the [CommonJS](http://www.commonjs.org/) module API and the [Asynchronous Module Definition](https://github.com/amdjs/amdjs-api/wiki/AMD) API, or AMD.\n\nAnd this will be your templates after you use Mustache:\n\n!['stache](https://cloud.githubusercontent.com/assets/288977/8779228/a3cf700e-2f02-11e5-869a-300312fb7a00.gif)\n\n## Install\n\nYou can get Mustache via npm.\n\n```bash\n$ npm install mustache --save\n```\nor install with bower:\n\n```bash\n$ bower install --save mustache\n```\n\n## Command line tool\n\nmustache.js is shipped with a node based command line tool. It might be installed as a global tool on your computer to render a mustache template of some kind\n\n```bash\n$ npm install -g mustache\n\n$ mustache dataView.json myTemplate.mustache > output.html\n```\n\nalso supports stdin.\n\n```bash\n$ cat dataView.json | mustache - myTemplate.mustache > output.html\n```\n\nor as a package.json `devDependency` in a build process maybe?\n\n```bash\n$ npm install mustache --save-dev\n```\n\n```json\n{\n  \"scripts\": {\n    \"build\": \"mustache dataView.json myTemplate.mustache > public/output.html\"\n  }\n}\n```\n```bash\n$ npm run build\n```\n\nThe command line tool is basically a wrapper around `Mustache.render` so you get all the features.\n\nIf your templates use partials you should pass paths to partials using `-p` flag:\n\n```bash\n$ mustache -p path/to/partial1.mustache -p path/to/partial2.mustache dataView.json myTemplate.mustache\n```\n\n## Who uses mustache.js?\n\nAn updated list of mustache.js users is kept [on the Github wiki](http://wiki.github.com/janl/mustache.js/beard-competition). Add yourself or your company if you use mustache.js!\n\n## Contributing\n\nmustache.js is a mature project, but it continues to actively invite maintainers. You can help out a high-profile project that is used in a lot of places on the web. There is [plenty](https://github.com/janl/mustache.js/issues) of [work](https://github.com/janl/mustache.js/pulls) to do. No big commitment required, if all you do is review a single [Pull Request](https://github.com/janl/mustache.js/pulls), you are a maintainer. And a hero.\n\n### Your First Contribution\n\n- review a [Pull Request](https://github.com/janl/mustache.js/pulls)\n- fix an [Issue](https://github.com/janl/mustache.js/issues)\n- update the [documentation](https://github.com/janl/mustache.js#usage)\n- make a website\n- write a tutorial\n\n* * *\n\n## Usage\n\nBelow is a quick example how to use mustache.js:\n\n```js\nvar view = {\n  title: \"Joe\",\n  calc: function () {\n    return 2 + 4;\n  }\n};\n\nvar output = Mustache.render(\"{{title}} spends {{calc}}\", view);\n```\n\nIn this example, the `Mustache.render` function takes two parameters: 1) the [mustache](http://mustache.github.com/) template and 2) a `view` object that contains the data and code needed to render the template.\n\n## Templates\n\nA [mustache](http://mustache.github.com/) template is a string that contains any number of mustache tags. Tags are indicated by the double mustaches that surround them. `{{person}}` is a tag, as is `{{#person}}`. In both examples we refer to `person` as the tag's key. There are several types of tags available in mustache.js, described below.\n\nThere are several techniques that can be used to load templates and hand them to mustache.js, here are two of them:\n\n#### Include Templates\n\nIf you need a template for a dynamic part in a static website, you can consider including the template in the static HTML file to avoid loading templates separately. Here's a small example using `jQuery`:\n\n```html\n<html>\n<body onload=\"loadUser\">\n<div id=\"target\">Loading...</div>\n<script id=\"template\" type=\"x-tmpl-mustache\">\nHello {{ name }}!\n</script>\n</body>\n</html>\n```\n\n```js\nfunction loadUser() {\n  var template = $('#template').html();\n  Mustache.parse(template);   // optional, speeds up future uses\n  var rendered = Mustache.render(template, {name: \"Luke\"});\n  $('#target').html(rendered);\n}\n```\n\n#### Load External Templates\n\nIf your templates reside in individual files, you can load them asynchronously and render them when they arrive. Another example using `jQuery`:\n\n```js\nfunction loadUser() {\n  $.get('template.mst', function(template) {\n    var rendered = Mustache.render(template, {name: \"Luke\"});\n    $('#target').html(rendered);\n  });\n}\n```\n\n### Variables\n\nThe most basic tag type is a simple variable. A `{{name}}` tag renders the value of the `name` key in the current context. If there is no such key, nothing is rendered.\n\nAll variables are HTML-escaped by default. If you want to render unescaped HTML, use the triple mustache: `{{{name}}}`. You can also use `&` to unescape a variable.\n\nIf you want `{{name}}` _not_ to be interpreted as a mustache tag, but rather to appear exactly as `{{name}}` in the output, you must change and then restore the default delimiter. See the [\"Set Delimiter\"](https://github.com/janl/mustache.js#set-delimiter) section for more information about custom delimiters.\n\nView:\n\n```json\n{\n  \"name\": \"Chris\",\n  \"company\": \"<b>GitHub</b>\"\n}\n```\n\nTemplate:\n\n```\n* {{name}}\n* {{age}}\n* {{company}}\n* {{{company}}}\n* {{&company}}\n{{=<% %>=}}\n* {{company}}\n<%={{ }}=%>\n```\n\nOutput:\n\n```html\n* Chris\n*\n* &lt;b&gt;GitHub&lt;/b&gt;\n* <b>GitHub</b>\n* <b>GitHub</b>\n* {{company}}\n```\n\nJavaScript's dot notation may be used to access keys that are properties of objects in a view.\n\nView:\n\n```json\n{\n  \"name\": {\n    \"first\": \"Michael\",\n    \"last\": \"Jackson\"\n  },\n  \"age\": \"RIP\"\n}\n```\n\nTemplate:\n\n```html\n* {{name.first}} {{name.last}}\n* {{age}}\n```\n\nOutput:\n\n```html\n* Michael Jackson\n* RIP\n```\n\n### Sections\n\nSections render blocks of text one or more times, depending on the value of the key in the current context.\n\nA section begins with a pound and ends with a slash. That is, `{{#person}}` begins a `person` section, while `{{/person}}` ends it. The text between the two tags is referred to as that section's \"block\".\n\nThe behavior of the section is determined by the value of the key.\n\n#### False Values or Empty Lists\n\nIf the `person` key does not exist, or exists and has a value of `null`, `undefined`, `false`, `0`, or `NaN`, or is an empty string or an empty list, the block will not be rendered.\n\nView:\n\n```json\n{\n  \"person\": false\n}\n```\n\nTemplate:\n\n```html\nShown.\n{{#person}}\nNever shown!\n{{/person}}\n```\n\nOutput:\n\n```html\nShown.\n```\n\n#### Non-Empty Lists\n\nIf the `person` key exists and is not `null`, `undefined`, or `false`, and is not an empty list the block will be rendered one or more times.\n\nWhen the value is a list, the block is rendered once for each item in the list. The context of the block is set to the current item in the list for each iteration. In this way we can loop over collections.\n\nView:\n\n```json\n{\n  \"stooges\": [\n    { \"name\": \"Moe\" },\n    { \"name\": \"Larry\" },\n    { \"name\": \"Curly\" }\n  ]\n}\n```\n\nTemplate:\n\n```html\n{{#stooges}}\n<b>{{name}}</b>\n{{/stooges}}\n```\n\nOutput:\n\n```html\n<b>Moe</b>\n<b>Larry</b>\n<b>Curly</b>\n```\n\nWhen looping over an array of strings, a `.` can be used to refer to the current item in the list.\n\nView:\n\n```json\n{\n  \"musketeers\": [\"Athos\", \"Aramis\", \"Porthos\", \"D'Artagnan\"]\n}\n```\n\nTemplate:\n\n```html\n{{#musketeers}}\n* {{.}}\n{{/musketeers}}\n```\n\nOutput:\n\n```html\n* Athos\n* Aramis\n* Porthos\n* D'Artagnan\n```\n\nIf the value of a section variable is a function, it will be called in the context of the current item in the list on each iteration.\n\nView:\n\n```js\n{\n  \"beatles\": [\n    { \"firstName\": \"John\", \"lastName\": \"Lennon\" },\n    { \"firstName\": \"Paul\", \"lastName\": \"McCartney\" },\n    { \"firstName\": \"George\", \"lastName\": \"Harrison\" },\n    { \"firstName\": \"Ringo\", \"lastName\": \"Starr\" }\n  ],\n  \"name\": function () {\n    return this.firstName + \" \" + this.lastName;\n  }\n}\n```\n\nTemplate:\n\n```html\n{{#beatles}}\n* {{name}}\n{{/beatles}}\n```\n\nOutput:\n\n```html\n* John Lennon\n* Paul McCartney\n* George Harrison\n* Ringo Starr\n```\n\n#### Functions\n\nIf the value of a section key is a function, it is called with the section's literal block of text, un-rendered, as its first argument. The second argument is a special rendering function that uses the current view as its view argument. It is called in the context of the current view object.\n\nView:\n\n```js\n{\n  \"name\": \"Tater\",\n  \"bold\": function () {\n    return function (text, render) {\n      return \"<b>\" + render(text) + \"</b>\";\n    }\n  }\n}\n```\n\nTemplate:\n\n```html\n{{#bold}}Hi {{name}}.{{/bold}}\n```\n\nOutput:\n\n```html\n<b>Hi Tater.</b>\n```\n\n### Inverted Sections\n\nAn inverted section opens with `{{^section}}` instead of `{{#section}}`. The block of an inverted section is rendered only if the value of that section's tag is `null`, `undefined`, `false`, *falsy* or an empty list.\n\nView:\n\n```json\n{\n  \"repos\": []\n}\n```\n\nTemplate:\n\n```html\n{{#repos}}<b>{{name}}</b>{{/repos}}\n{{^repos}}No repos :({{/repos}}\n```\n\nOutput:\n\n```html\nNo repos :(\n```\n\n### Comments\n\nComments begin with a bang and are ignored. The following template:\n\n```html\n<h1>Today{{! ignore me }}.</h1>\n```\n\nWill render as follows:\n\n```html\n<h1>Today.</h1>\n```\n\nComments may contain newlines.\n\n### Partials\n\nPartials begin with a greater than sign, like {{> box}}.\n\nPartials are rendered at runtime (as opposed to compile time), so recursive partials are possible. Just avoid infinite loops.\n\nThey also inherit the calling context. Whereas in ERB you may have this:\n\n```html+erb\n<%= partial :next_more, :start => start, :size => size %>\n```\n\nMustache requires only this:\n\n```html\n{{> next_more}}\n```\n\nWhy? Because the `next_more.mustache` file will inherit the `size` and `start` variables from the calling context. In this way you may want to think of partials as includes, imports, template expansion, nested templates, or subtemplates, even though those aren't literally the case here.\n\n\nFor example, this template and partial:\n\n    base.mustache:\n    <h2>Names</h2>\n    {{#names}}\n      {{> user}}\n    {{/names}}\n\n    user.mustache:\n    <strong>{{name}}</strong>\n\nCan be thought of as a single, expanded template:\n\n```html\n<h2>Names</h2>\n{{#names}}\n  <strong>{{name}}</strong>\n{{/names}}\n```\n\nIn mustache.js an object of partials may be passed as the third argument to `Mustache.render`. The object should be keyed by the name of the partial, and its value should be the partial text.\n\n```js\nMustache.render(template, view, {\n  user: userTemplate\n});\n```\n\n### Set Delimiter\n\nSet Delimiter tags start with an equals sign and change the tag delimiters from `{{` and `}}` to custom strings.\n\nConsider the following contrived example:\n\n```\n* {{ default_tags }}\n{{=<% %>=}}\n* <% erb_style_tags %>\n<%={{ }}=%>\n* {{ default_tags_again }}\n```\n\nHere we have a list with three items. The first item uses the default tag style, the second uses ERB style as defined by the Set Delimiter tag, and the third returns to the default style after yet another Set Delimiter declaration.\n\nAccording to [ctemplates](http://google-ctemplate.googlecode.com/svn/trunk/doc/howto.html), this \"is useful for languages like TeX, where double-braces may occur in the text and are awkward to use for markup.\"\n\nCustom delimiters may not contain whitespace or the equals sign.\n\n## Pre-parsing and Caching Templates\n\nBy default, when mustache.js first parses a template it keeps the full parsed token tree in a cache. The next time it sees that same template it skips the parsing step and renders the template much more quickly. If you'd like, you can do this ahead of time using `mustache.parse`.\n\n```js\nMustache.parse(template);\n\n// Then, sometime later.\nMustache.render(template, view);\n```\n\n## Plugins for JavaScript Libraries\n\nmustache.js may be built specifically for several different client libraries, including the following:\n\n  - [jQuery](http://jquery.com/)\n  - [MooTools](http://mootools.net/)\n  - [Dojo](http://www.dojotoolkit.org/)\n  - [YUI](http://developer.yahoo.com/yui/)\n  - [qooxdoo](http://qooxdoo.org/)\n\nThese may be built using [Rake](http://rake.rubyforge.org/) and one of the following commands:\n\n    $ rake jquery\n    $ rake mootools\n    $ rake dojo\n    $ rake yui3\n    $ rake qooxdoo\n\n## Testing\n\nIn order to run the tests you'll need to install [node](http://nodejs.org/).\n\nYou also need to install the sub module containing [Mustache specifications](http://github.com/mustache/spec) in the project root.\n\n    $ git submodule init\n    $ git submodule update\n\nInstall dependencies.\n\n    $ npm install\n\nThen run the tests.\n\n    $ npm test\n\nThe test suite consists of both unit and integration tests. If a template isn't rendering correctly for you, you can make a test for it by doing the following:\n\n  1. Create a template file named `mytest.mustache` in the `test/_files`\n     directory. Replace `mytest` with the name of your test.\n  2. Create a corresponding view file named `mytest.js` in the same directory.\n     This file should contain a JavaScript object literal enclosed in\n     parentheses. See any of the other view files for an example.\n  3. Create a file with the expected output in `mytest.txt` in the same\n     directory.\n\nThen, you can run the test with:\n\n    $ TEST=mytest npm run test-render\n\n### Browser tests\n\nBrowser tests are not included in `npm test` as they run for too long, although they are ran automatically on Travis when merged into master. Run browser tests locally in any browser:\n\n    $ npm run test-browser-local\n\nthen point your browser to `http://localhost:8080/__zuul`\n\n### Troubleshooting\n\n#### npm install fails\n\nEnsure to have a recent version of npm installed. While developing this project requires npm with support for `^` version ranges.\n\n    $ npm install -g npm\n\n## Thanks\n\nmustache.js wouldn't kick ass if it weren't for these fine souls:\n\n  * Chris Wanstrath / defunkt\n  * Alexander Lang / langalex\n  * Sebastian Cohnen / tisba\n  * J Chris Anderson / jchris\n  * Tom Robinson / tlrobinson\n  * Aaron Quint / quirkey\n  * Douglas Crockford\n  * Nikita Vasilyev / NV\n  * Elise Wood / glytch\n  * Damien Mathieu / dmathieu\n  * Jakub Kuźma / qoobaa\n  * Will Leinweber / will\n  * dpree\n  * Jason Smith / jhs\n  * Aaron Gibralter / agibralter\n  * Ross Boucher / boucher\n  * Matt Sanford / mzsanford\n  * Ben Cherry / bcherry\n  * Michael Jackson / mjackson\n  * Phillip Johnsen / phillipj\n  * David da Silva Contín / dasilvacontin\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/janl/mustache.js/issues"
  },
  "_id": "mustache@2.2.1",
  "dist": {
    "shasum": "370723a101f61f1b1eba59868f443c4b8649db35"
  },
  "_from": "mustache@^2.2.1",
  "_resolved": "https://registry.npmjs.org/mustache/-/mustache-2.2.1.tgz"
}
